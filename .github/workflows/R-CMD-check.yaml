# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
#
# NOTE: This workflow is overkill for most R packages and
# check-standard.yaml is likely a better choice.
# usethis::use_github_action("check-standard") will install it.
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

jobs:

  Build-Libs:

    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '#build-libs')
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        - {os: macOS-latest, cuda: 0}
        - {os: windows-latest, cuda: 0}
        - {os: windows-latest, cuda: 10.2}
        - {os: windows-latest, cuda: 11.1}
        - {os: ubuntu-18.04, cuda: 0}
        - {os: ubuntu-18.04, cuda: 10.2}
        - {os: ubuntu-18.04, cuda: 11.1}

    env:
      TORCH_INSTALL: 1
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      
      - name: Create environment
        run: cmake -E make_directory ${{runner.workspace}}/build
      - name: Free up 24GB of disk space
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: sudo rm -rf /usr/share/dotnet
      - name: Prep cmake cuda 10.2
        if: ${{ matrix.cuda == 10.2 && matrix.os == 'ubuntu-18.04'}}
        run: |
          wget --quiet http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
          chmod +x cuda_10.2.89_440.33.01_linux.run
          sudo ./cuda_10.2.89_440.33.01_linux.run --silent --toolkit
          echo "CUDA=${{matrix.cuda}}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda" >> $GITHUB_ENV
          dir /usr/local
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-linux-x64-v7.6.5.32.tgz
          tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
          sudo cp cuda/include/cudnn*.h /usr/local/cuda/include
          sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
          sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*
          echo "CUDNN_LIBRARY_PATH=/usr/local/cuda/lib64" >> $GITHUB_ENV
          echo "CUDNN_INCLUDE_PATH=/usr/local/cuda/include" >> $GITHUB_ENV
      - name: Prep cmake cuda 11.1
        if: ${{ matrix.cuda == 11.1 && matrix.os == 'ubuntu-18.04' }}
        run: |
          wget --quiet https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_455.32.00_linux.run
          chmod +x cuda_11.1.1_455.32.00_linux.run
          sudo ./cuda_11.1.1_455.32.00_linux.run --silent --toolkit
          echo "CUDA=${{matrix.cuda}}" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda" >> $GITHUB_ENV
          rm cuda_11.1.1_455.32.00_linux.run
          dir /usr/local
          wget --quiet https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.1-linux-x64-v8.0.5.39.tgz
          tar -xzvf cudnn-11.1-linux-x64-v8.0.5.39.tgz
          sudo cp cuda/include/cudnn*.h /usr/local/cuda/include
          sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
          sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*
          rm cudnn-11.1-linux-x64-v8.0.5.39.tgz
          echo "CUDNN_LIBRARY_PATH=/usr/local/cuda/lib64" >> $GITHUB_ENV
          echo "CUDNN_INCLUDE_PATH=/usr/local/cuda/include" >> $GITHUB_ENV
      - name: Prep cuda 10.2 (windows)
        if: ${{ matrix.cuda == 10.2 && matrix.os == 'windows-2019'}}
        run: |
          curl http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_441.22_win10.exe --output cuda.exe --silent --location
          Start-Process ./cuda.exe -argumentlist "-s" -wait
          echo "CUDA=${{ matrix.cuda }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CUDA_TOOLKIT_ROOT_DIR=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          curl https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-10.2-windows10-x64-v7.6.5.32.zip --output cudnn.zip --silent --location 
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-Content -Path $env:GITHUB_ENV -TotalCount 5
          Remove-Item cuda.exe
          Get-CimInstance -ClassName Win32_LogicalDisk | Select-Object -Property DeviceID,FreeSpace
      - name: Prep cuda 11.1 (windows)
        if: ${{ matrix.cuda == 11.1 && matrix.os == 'windows-2019'}}
        run: |
          curl https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_11.1.1_456.81_win10.exe --output cuda.exe --silent --location
          Start-Process ./cuda.exe -argumentlist "-s" -wait
          echo "CUDA=${{ matrix.cuda }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CUDA_TOOLKIT_ROOT_DIR=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          curl https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.1-windows-x64-v8.0.5.39.zip --output cudnn.zip --silent --location 
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${{ matrix.cuda }}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Get-Content -Path $env:GITHUB_ENV -TotalCount 5
          Remove-Item cuda.exe
          Get-CimInstance -ClassName Win32_LogicalDisk | Select-Object -Property DeviceID,FreeSpace

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install dependencies
        run: Rscript -e "install.packages(c('remotes', 'desc', 'rcmdcheck'))" -e "remotes::install_deps(dependencies = TRUE, INSTALL_opts='--no-multiarch')"

      - run: |
          cd csrc
          mkdir build && cd build
          cmake ..
          cmake --build . --target package --config Release

      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: csrc/build/*.zip
          overwrite: true
          file_glob: true
          tag: libstyleganr


  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: '3.6'}
          - {os: ubuntu-18.04,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      TORCH_INSTALL: 1

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true


      - run: |
          Rscript -e "install.packages(c('remotes', 'desc', 'rcmdcheck'))" -e "remotes::install_deps(dependencies = TRUE, INSTALL_opts='--no-multiarch')"

      - run: |
          cd csrc
          mkdir build && cd build
          cmake ..
          cmake --build . --target package --config Release
          Rscript -e "cat('ZIP file:', normalizePath(list.files(pattern='zip', full.names=TRUE)))"
          Rscript -e "cat('ENV file:', Sys.getenv('GITHUB_ENV'))"
          Rscript -e "writeLines(paste0('STYLEGANR_URL=',normalizePath(list.files(pattern='zip', full.names=TRUE))), Sys.getenv('GITHUB_ENV'))"

      - uses: r-lib/actions/check-r-package@v1
        with:
          error-on: '"error"'
          args: 'c("--no-multiarch", "--no-manual")'

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
